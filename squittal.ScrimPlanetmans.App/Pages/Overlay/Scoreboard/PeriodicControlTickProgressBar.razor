@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using squittal.ScrimPlanetmans.Models;
@using squittal.ScrimPlanetmans.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.ScrimMatch.Timers;
@using squittal.ScrimPlanetmans.Services.Planetside;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;
@using System.Threading;

@inject IScrimMatchEngine ScrimMatchEngine
@inject IScrimTeamsManager ScrimTeamsManager
@inject IScrimMessageBroadcastService MessageService
@inject IFactionService FactionService
@inject IOverlayStateService OverlayState 

@implements IDisposable


@if ((_matchState == MatchState.Running || _matchState == MatchState.Paused) && _showComponent)
{
    <div class="periodic-control-progress-container">
        <div class="tick-bar left" style="transform: scaleX(@_scaleValue);"></div>
        <div class="tick-bar right" style="transform: scaleX(@_scaleValue);"></div>
        <div class="legend-container @SqCssHelper.GetFactionClassFromId(_controllingFactionId)">
            <span class="points @SqCssHelper.GetFactionClassFromId(_controllingFactionId)">+@_pointsPerTick</span>
            <span class="flag capture-flag-container @SqCssHelper.GetFactionClassFromId(_controllingFactionId)">
                <span class="iconify capture-flag" data-icon="ion:flag" data-inline="false"></span>
            </span>
        </div>
    </div>
}

@code {
    private const int UpdateTimerPeriodMs = 1000;

    private readonly AutoResetEvent _autoEvent = new AutoResetEvent(true);
    private readonly AutoResetEvent _msgAutoEvent = new AutoResetEvent(true);

    private bool _showComponent = false;
    private Guid _instanceGuid;

    private MatchState _matchState;
    private bool _isPeriodPointsEnabled = Ruleset.DefaultEnablePeriodicFacilityControlRewards;
    private int _secondsPerTick;
    private int _pointsPerTick;

    private int? _controllingTeamOrdinal;
    private int? _controllingFactionId;

    private PeriodicPointsTimerStateMessage _latestPeriodicPointsTimerTickMessage;

    private Guid _lastReceivedGuid;

    private Timer _updateTimer;
    private DateTime? _lastUpdateTime;

    private bool _disposed = false;
    private double _scaleValue;

    private DateTime? LastElapsedTime => _latestPeriodicPointsTimerTickMessage?.LastElapsedTime;
    private DateTime? LastPausedTime => _latestPeriodicPointsTimerTickMessage?.LastPausedTime;
    private DateTime? LastResumedTime => _latestPeriodicPointsTimerTickMessage?.LastResumedTime;

    #region Initialization
    protected override void OnInitialized()
    {
        _instanceGuid = Guid.NewGuid();
        OverlayState.SetActivePeriodicPointsProgressBarGuid(_instanceGuid);

        SyncMatchStateAndConfig();

        int resumeDelay = GetUpdateDelayMilliseconds();
        _updateTimer = new Timer(HandleUpdateTimerTick, _autoEvent, resumeDelay, UpdateTimerPeriodMs);

        SyncProgressState();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            MessageService.RaisePeriodicPointsTimerTickEvent += ReceivePeriodicPointsTimerTickEvent;
            MessageService.RaiseScrimFacilityControlActionEvent += ReceiveFacilityControlEvent;
            MessageService.RaiseMatchStateUpdateEvent += ReceiveMatchStateUpdateEvent;
        }
    }

    public void Dispose()
    {
        OverlayState.InactivatePeriodicPointsProgressBarGuid(_instanceGuid);

        _updateTimer?.Dispose();

        _msgAutoEvent.Set();

        MessageService.RaisePeriodicPointsTimerTickEvent -= ReceivePeriodicPointsTimerTickEvent;
        MessageService.RaiseScrimFacilityControlActionEvent -= ReceiveFacilityControlEvent;
        MessageService.RaiseMatchStateUpdateEvent -= ReceiveMatchStateUpdateEvent;

        _disposed = true;
    }

    private void SyncMatchStateAndConfig()
    {
        _matchState = ScrimMatchEngine.GetMatchState();

        _isPeriodPointsEnabled = ScrimMatchEngine.Config.EnablePeriodicFacilityControlRewards;
        _secondsPerTick = ScrimMatchEngine.Config.PeriodicFacilityControlInterval.GetValueOrDefault();
        _pointsPerTick = ScrimMatchEngine.Config.PeriodicFacilityControlPoints.GetValueOrDefault();

        if (_matchState == MatchState.Stopped || _matchState == MatchState.Uninitialized || !_isPeriodPointsEnabled)
        {
            _controllingTeamOrdinal = null;
            _latestPeriodicPointsTimerTickMessage = null;

            _lastUpdateTime = null;

            _controllingTeamOrdinal = null;
            _controllingFactionId = null;

            _updateTimer?.Change(Timeout.Infinite, Timeout.Infinite);

            _showComponent = false;
        }
        else
        {
            _latestPeriodicPointsTimerTickMessage = ScrimMatchEngine.GetLatestPeriodicPointsTimerTickMessage();

            _controllingTeamOrdinal = ScrimMatchEngine.GetFacilityControlTeamOrdinal();

            if (_controllingTeamOrdinal.HasValue)
            {
                _controllingFactionId = ScrimTeamsManager.GetTeam(_controllingTeamOrdinal.Value).FactionId;
            }

            if (_controllingFactionId.HasValue)
            {
                _showComponent = true;
            }
            else
            {
                _showComponent = false;
            }

            if (_updateTimer == null)
            {
                int resumeDelay = GetUpdateDelayMilliseconds();
                _updateTimer = new Timer(HandleUpdateTimerTick, _autoEvent, resumeDelay, UpdateTimerPeriodMs);
            }
        }
    }
    #endregion Initialization

    #region Progress Bar Display
    private void SyncProgressState()
    {
        if (_controllingTeamOrdinal.HasValue)
        {
            _controllingFactionId = ScrimTeamsManager.GetTeam(_controllingTeamOrdinal.Value).FactionId;
        }
        else
        {
            _showComponent = false;
            InvokeAsync(StateHasChanged);
            return;
        }

        if (_controllingFactionId.HasValue)
        {
            _showComponent = true;
        }
        else
        {
            _showComponent = false;
            InvokeAsync(StateHasChanged);
            return;
        }

        int millisecondsFromLastPeriodicTick = GetMillisecondsElapsedFromLastPeriodicTick();

        if (millisecondsFromLastPeriodicTick == Timeout.Infinite)
        {
            _scaleValue = 0;
            InvokeAsync(StateHasChanged);
            return;
        }

        int intervalMilliseconds = _secondsPerTick * 1000;
        int millisecondsRemaining = intervalMilliseconds - millisecondsFromLastPeriodicTick;

        if (millisecondsRemaining < 0)
        {
            millisecondsRemaining = 0;
        }

        _scaleValue = (millisecondsRemaining * 1.0) / intervalMilliseconds;

        InvokeAsync(StateHasChanged);
    }

    private int GetUpdateDelayMilliseconds()
    {
        if (_latestPeriodicPointsTimerTickMessage == null)
        {
            return Timeout.Infinite;
        }

        DateTime currentTime = DateTime.UtcNow;

        if (!_lastUpdateTime.HasValue && !LastElapsedTime.HasValue)
        {
            return Timeout.Infinite;
        }
        else if (!_lastUpdateTime.HasValue && LastElapsedTime.HasValue)
        {
            int millisecondsFromLastElapsed = GetMillisecondsElapsedFromLastPeriodicTick();
            TimeSpan timeSpanRemainder = TimeSpan.FromMilliseconds(millisecondsFromLastElapsed % UpdateTimerPeriodMs);

            _lastUpdateTime = currentTime.Subtract(timeSpanRemainder);
        }

        TimerState lastState = _latestPeriodicPointsTimerTickMessage.State;

        // TODO: Do we need to check more states here?
        if (lastState == TimerState.Paused)
        {
            return Timeout.Infinite;
        }

        int millisecondsFromLastUpdateTick = (int)(currentTime - _lastUpdateTime.Value).TotalMilliseconds;
        int pauseDelayMilliseconds = 0;

        if (LastPausedTime.HasValue && LastResumedTime.HasValue)
        {
            pauseDelayMilliseconds = (int)(LastResumedTime.Value - LastPausedTime.Value).TotalMilliseconds;
        }

        int updateDelayMilliseconds = UpdateTimerPeriodMs - (millisecondsFromLastUpdateTick - pauseDelayMilliseconds);

        if (updateDelayMilliseconds < Timeout.Infinite || updateDelayMilliseconds > 1000)
        {
            updateDelayMilliseconds = 0;
        }

        return updateDelayMilliseconds;
    }

    private int GetMillisecondsElapsedFromLastPeriodicTick()
    {
        if (_latestPeriodicPointsTimerTickMessage == null)
        {
            return Timeout.Infinite;
        }

        if (!LastElapsedTime.HasValue)
        {
            return Timeout.Infinite;
        }

        // Step 1: Current Time - Last Elapsed Tick Time
        DateTime currentTime = DateTime.UtcNow;

        int millisecondsFromLastElapsedTick = (int)(currentTime - LastElapsedTime.Value).TotalMilliseconds;

        // Step 2: Get pause delay, if there was one
        int pauseDelayMilliseconds = 0;

        if (LastPausedTime.HasValue && LastResumedTime.HasValue)
        {
            pauseDelayMilliseconds = (int)(LastResumedTime.Value - LastPausedTime.Value).TotalMilliseconds;
        }
        else if (LastPausedTime.HasValue && !LastResumedTime.HasValue)
        {
            pauseDelayMilliseconds = (int)(currentTime - LastPausedTime.Value).TotalMilliseconds;
        }

        int intervalMilliseconds = _secondsPerTick * 1000;

        int millisecondsElapsed = millisecondsFromLastElapsedTick - pauseDelayMilliseconds;

        return millisecondsElapsed;

    }

    #endregion Progress Bar Display

    #region Event Handling
    private void ReceivePeriodicPointsTimerTickEvent(object sender, ScrimMessageEventArgs<PeriodicPointsTimerStateMessage> e)
    {
        _msgAutoEvent.WaitOne();

        if (!OverlayState.IsActivePeriodicPointsProgressBarGuid(_instanceGuid))
        {
            OverlayState.InactivatePeriodicPointsProgressBarGuid(_instanceGuid);

            _updateTimer?.Dispose();

            MessageService.RaisePeriodicPointsTimerTickEvent -= ReceivePeriodicPointsTimerTickEvent;
            MessageService.RaiseScrimFacilityControlActionEvent -= ReceiveFacilityControlEvent;
            MessageService.RaiseMatchStateUpdateEvent -= ReceiveMatchStateUpdateEvent;

            _msgAutoEvent.Set();
            return;
        }

        if (_disposed)
        {
            _msgAutoEvent.Set();
            return;
        }

        PeriodicPointsTimerStateMessage message = e.Message;

        if (_latestPeriodicPointsTimerTickMessage != null && message.Guid == _latestPeriodicPointsTimerTickMessage.Guid)
        {
            _msgAutoEvent.Set();
            return;
        }

        if (_lastReceivedGuid == message.Guid)
        {
            _msgAutoEvent.Set();
            return;
        }

        _lastReceivedGuid = message.Guid;

        DateTime latestTickTime = _latestPeriodicPointsTimerTickMessage?.Timestamp ?? DateTime.UtcNow;
        DateTime? latestElapsedTime = _latestPeriodicPointsTimerTickMessage?.LastElapsedTime ?? DateTime.UtcNow;
        TimerState latestState = _latestPeriodicPointsTimerTickMessage?.State ?? TimerState.Uninitialized;
        bool? latestElapsed = _latestPeriodicPointsTimerTickMessage?.PeriodElapsed;

        TimerState newState = message.State;
        _latestPeriodicPointsTimerTickMessage = message;

        int resumeDelay = 0;

        if (!message.PeriodElapsed)
        {
            resumeDelay = GetUpdateDelayMilliseconds();
        }

        _updateTimer.Change(resumeDelay, UpdateTimerPeriodMs);

        _msgAutoEvent.Set();
    }

    private void ReceiveFacilityControlEvent(object sender, ScrimMessageEventArgs<ScrimFacilityControlActionEventMessage> e)
    {
        int newControllingTeamOrdinal = e.Message.FacilityControl.ControllingTeamOrdinal;

        if (_controllingTeamOrdinal != newControllingTeamOrdinal)
        {
            _controllingTeamOrdinal = newControllingTeamOrdinal;
            _controllingFactionId = ScrimTeamsManager.GetTeam(_controllingTeamOrdinal.Value).FactionId;
            SyncProgressState();
        }
    }

    private void ReceiveMatchStateUpdateEvent(object sender, ScrimMessageEventArgs<MatchStateUpdateMessage> e)
    {
        MatchState oldMatchState = _matchState;
        MatchState newMatchState = e.Message.MatchState;

        if (oldMatchState != newMatchState)
        {
            _matchState = newMatchState;

            SyncMatchStateAndConfig();
            InvokeAsync(StateHasChanged);
        }
    }
    #endregion Event Handling

    #region Update Timer
    private void HandleUpdateTimerTick(object state)
    {
        _lastUpdateTime = DateTime.UtcNow;

        SyncProgressState();
    }
    #endregion Update Timer
}
