@using squittal.ScrimPlanetmans.CensusStream;
@using squittal.ScrimPlanetmans.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using squittal.ScrimPlanetmans.Models;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.Services.Planetside;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;
@using System.Collections.Concurrent;

@inject IScrimTeamsManager ScrimTeamsManager
@inject IWebsocketMonitor WebsocketMonitor
@inject IScrimMatchEngine ScrimMatchEngine
@inject IOutfitService OutfitService
@inject IWorldService WorldService
@inject IFactionService FactionService
@inject IScrimMessageBroadcastService MessageService

@implements IDisposable

@if (_team != null)
{
    <div class="players @($"players{TeamOrdinal}") @_compactCssClass @_compactFiveColumnsCssClass @_noScoreCssClass @SqCssHelper.GetFactionClassFromId(_team.FactionId)">

        @lock (_renderedPlayers)
        {
            foreach (Player player in _renderedPlayers)
            {
                if (CompactLayout)
                {
                    <TeamPlayerCompactStatusCell Player=player NoScore=!_resolvedShowScores CurrentRoundOnly=CurrentRoundOnly />
                }
                else
                {
                    <TeamPlayerStatusRow TeamOrdinal=TeamOrdinal Player=player NoScore=!_resolvedShowScores CurrentRoundOnly=CurrentRoundOnly />
                }
            }
        }

    </div>
}

@code {
    private const string CssCompactFiveColumnsClass = "compact-5-columns";
    private const string CssCompactLayoutClass = "compact";
    private const string CssNoScoreClass = "noScore";

    private bool? _renderedShowPlayerScores;
    private bool _resolvedShowScores = true;

    private Team _team;

    private List<Player> _renderedPlayers = new List<Player>();
    private int _renderedPlayersCount = 0;
    private ConcurrentQueue<TeamPlayerChangeMessage> _teamPlayersQueue = new ConcurrentQueue<TeamPlayerChangeMessage>();

    private string _compactCssClass = string.Empty;
    private string _noScoreCssClass = string.Empty;
    private string _compactFiveColumnsCssClass = string.Empty;

    [Parameter]
    public int TeamOrdinal { get; set; }

    [Parameter]
    public bool CompactLayout { get; set; }

    [Parameter]
    public OverlayStatsDisplayType StatsType { get; set; }

    [Parameter]
    public bool CurrentRoundOnly { get; set; }

    [Parameter]
    public bool? ShowPlayerScores { get; set; }

    #region Initialization Methods
    protected override void OnInitialized()
    {
        MessageService.RaiseTeamPlayerChangeEvent += ReceiveTeamPlayerChangeEvent;
        MessageService.RaisePlayerStatUpdateEvent += ReceivePlayerStatUpdateEvent;
        MessageService.RaiseTeamFactionChangeEvent += ReceiveTeamFactionChangeEvent;
    }

    public void Dispose()
    {
        MessageService.RaiseTeamPlayerChangeEvent -= ReceiveTeamPlayerChangeEvent;
        MessageService.RaisePlayerStatUpdateEvent -= ReceivePlayerStatUpdateEvent;
        MessageService.RaiseTeamFactionChangeEvent -= ReceiveTeamFactionChangeEvent;
    }

    protected override void OnParametersSet()
    {
        InitializeTeamData();
        SetCompactModeCssClass();

        if (ResolveShowPlayerScores())
        {
            SetNoScoreCssClass();
        }
    }

    private void InitializeTeamData()
    {
        _team = ScrimTeamsManager.GetTeam(TeamOrdinal);

        InvokeAsync(() =>
        {
            lock (_renderedPlayers)
            {
                IEnumerable<Player> visiblePlayers = _team.Players.Where(p => ShouldShowPlayer(p) && !_renderedPlayers.Contains(p));

                _renderedPlayers.AddRange(visiblePlayers);
                _renderedPlayersCount = _renderedPlayers.Count();

                SetCompact5sCssClass();
                StateHasChanged();
            }
        });
    }
    #endregion

    #region Event Handling
    private void ReceiveTeamPlayerChangeEvent(object sender, ScrimMessageEventArgs<TeamPlayerChangeMessage> e)
    {
        TeamPlayerChangeMessage message = e.Message;
        Player player = message.Player;

        if (player.TeamOrdinal != TeamOrdinal)
        {
            return;
        }

        TeamPlayerChangeMessage newMessage;

        if (message.ChangeType != TeamPlayerChangeType.Remove)
        {
            if (ShouldShowPlayer(player))
            {
                newMessage = new TeamPlayerChangeMessage(player, TeamPlayerChangeType.Add);
            }
            else
            {
                newMessage = new TeamPlayerChangeMessage(player, TeamPlayerChangeType.Remove);
            }
        }
        else
        {
            newMessage = new TeamPlayerChangeMessage(player, message.ChangeType);
        }

        _teamPlayersQueue.Enqueue(newMessage);

        UpdateRenderedPlayers();
    }

    private void ReceivePlayerStatUpdateEvent(object sender, ScrimMessageEventArgs<PlayerStatUpdateMessage> e)
    {
        Player player = e.Message.Player;

        if (player.TeamOrdinal != TeamOrdinal)
        {
            return;
        }

        TeamPlayerChangeType changeType = ShouldShowPlayer(player) ? TeamPlayerChangeType.Add : TeamPlayerChangeType.Remove;
        TeamPlayerChangeMessage changeMessage = new TeamPlayerChangeMessage(player, changeType);

        _teamPlayersQueue.Enqueue(changeMessage);

        UpdateRenderedPlayers();
    }

    private void ReceiveTeamFactionChangeEvent(object sender, ScrimMessageEventArgs<TeamFactionChangeMessage> e)
    {
        if (e.Message.TeamOrdinal == TeamOrdinal)
        {
            InvokeAsync(StateHasChanged);
        }
    }
    #endregion Event Handling

    private void UpdateRenderedPlayers()
    {
        InvokeAsync(() =>
        {
            lock (_renderedPlayers)
            {
                while (_teamPlayersQueue.TryDequeue(out TeamPlayerChangeMessage changeMessage))
                {
                    Player player = changeMessage.Player;

                    if (changeMessage.ChangeType == TeamPlayerChangeType.Remove)
                    {
                        _renderedPlayers.Remove(player);
                    }
                    else if (changeMessage.ChangeType == TeamPlayerChangeType.Add && !_renderedPlayers.Contains(player))
                    {
                        _renderedPlayers.Add(player);
                    }
                }

                _renderedPlayersCount = _renderedPlayers.Count();

                SetCompact5sCssClass();
                StateHasChanged();
            }
        });
    }

    private bool ShouldShowPlayer(Player player)
    {
        return (player.IsActive || player.IsOnline) && !player.IsBenched;
    }

    private bool ResolveShowPlayerScores()
    {
        bool? previousShowScores = _renderedShowPlayerScores;

        if (_renderedShowPlayerScores != null)
        {
            _resolvedShowScores = _renderedShowPlayerScores.Value;

            return _resolvedShowScores != previousShowScores;
        }

        _resolvedShowScores = StatsType switch
        {
            OverlayStatsDisplayType.InfantryScores => true,
            OverlayStatsDisplayType.InfantryObjective => false,
            OverlayStatsDisplayType.AirVehicleScores => true,
            OverlayStatsDisplayType.GroundVehicleScores => true,
            OverlayStatsDisplayType.CombinedArmsObjective => false,
            _ => true
        };

        return _resolvedShowScores != previousShowScores;
    }

    private void SetCompactModeCssClass()
    {
        _compactCssClass = CompactLayout ? CssCompactLayoutClass : string.Empty;
    }

    private void SetNoScoreCssClass()
    {
        _noScoreCssClass = !_resolvedShowScores ? CssNoScoreClass : string.Empty;
    }

    private void SetCompact5sCssClass()
    {
        _compactFiveColumnsCssClass = _renderedPlayersCount == 10 ? CssCompactFiveColumnsClass : string.Empty;
    }
}
