@using squittal.ScrimPlanetmans.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;
@using System.Threading;
@using System.Collections.Concurrent;

@inject IScrimMatchEngine ScrimMatchEngine 
@inject IScrimMessageBroadcastService MessageService

@implements IDisposable

@if (Player != null)
{
    <div class="playerStatusContainer @GetContainerCssClass() @_noScoreCssClass">
        <TeamPlayerCompactStatusCellLoadout Player=Player />

        <div class="name">@Player.NameDisplay</div>

        @if (!NoScore)
        {
            <div class="score">
                <div class="net">
                    <span class="label @GetNetScoreLabelCssClass()">@GetNetScoreLabelText()</span>
                </div>
            </div>
        }

        <div class="eventMask">
            @if (_renderedStatus == PlayerStatus.ContestingObjective)
            {
                <PlayerStatusAnimationContestingPoint />
            }
            else if (_renderedStatus == PlayerStatus.Respawning)
            {
                <PlayerStatusAnimationRespawning />
            }
        </div>
    </div>
}

@code {
    private const string CssNoScoreClass = "noScore";
    private const int DeathEventEffectiveDurationMs = 7000;
    private const int ObjectiveTickEventEffectiveDurationMs = 2950;
    private const int ReviveEventEffectiveDurationMs = 1000;

    private readonly AutoResetEvent _autoEvent = new AutoResetEvent(true);

    private int _currentRound;
    private int _renderedNetScore;
    private string _noScoreCssClass = string.Empty;

    private ConcurrentQueue<ScrimKillfeedEvent> _eventsQueue = new ConcurrentQueue<ScrimKillfeedEvent>();
    private Timer _timer;

    private PlayerStatus _renderedStatus = PlayerStatus.Alive;
    private DateTime _lastDeathTime;
    private DateTime _lastRevivedTime;
    private DateTime _lastRenderedDeathTime;

    [Parameter]
    public Player Player { get; set; }

    [Parameter]
    public bool NoScore { get; set; }

    [Parameter]
    public bool CurrentRoundOnly { get; set; } = MatchOverlay.DefaultShowCurrentRoundOnly;

    #region Initialization Methods
    protected override void OnInitialized()
    {
        //MessageService.RaisePlayerLoginEvent += ReceivePlayerLoginEvent;
        //MessageService.RaisePlayerLogoutEvent += ReceivePlayerLogoutEvent;

        MessageService.RaisePlayerStatUpdateEvent += ReceivePlayerStatUpdateEvent;
        MessageService.RaisePlayerNameDisplayChangeEvent += ReceivePlayerNameDisplayChangeMessageEvent;
        MessageService.RaiseScrimDeathActionEvent += ReceiveScrimDeathActionEvent;
        MessageService.RaiseScrimReviveActionEvent += ReceiveScrimReviveActionEvent;
        MessageService.RaiseScrimObjectiveTickActionEvent += ReceiveScrimObjectiveTickActionEvent;
        MessageService.RaiseMatchStateUpdateEvent += ReceiveMatchStateUpdateEvent;

        _currentRound = ScrimMatchEngine.GetCurrentRound();

        InitializeTimer();
    }

    public void Dispose()
    {
        MessageService.RaisePlayerStatUpdateEvent -= ReceivePlayerStatUpdateEvent;
        MessageService.RaisePlayerNameDisplayChangeEvent -= ReceivePlayerNameDisplayChangeMessageEvent;
        MessageService.RaiseScrimDeathActionEvent -= ReceiveScrimDeathActionEvent;
        MessageService.RaiseScrimReviveActionEvent -= ReceiveScrimReviveActionEvent;
        MessageService.RaiseScrimObjectiveTickActionEvent -= ReceiveScrimObjectiveTickActionEvent;
        MessageService.RaiseMatchStateUpdateEvent -= ReceiveMatchStateUpdateEvent;
    }

    protected override void OnParametersSet()
    {
        CheckForChanges(Player);
        SetNoScoreCssClass();

        if (!NoScore)
        {
            int newNetScore = 0;

            if (CurrentRoundOnly)
            {
                if (Player.EventAggregateTracker.RoundHistory.TryGetValue(_currentRound, out ScrimEventAggregate roundStats))
                {
                    newNetScore = roundStats.NetScore;
                }
                else
                {
                    newNetScore = Player.EventAggregateTracker.RoundStats.Points;
                }
            }
            else
            {
                newNetScore = Player.EventAggregate.NetScore;
            }

            if (_renderedNetScore != newNetScore)
            {
                _renderedNetScore = newNetScore;
            }
        }
    }
    #endregion Initialization Methods

    #region Event Handling
    private void ReceivePlayerStatUpdateEvent(object sender, ScrimMessageEventArgs<PlayerStatUpdateMessage> e)
    {
        if (e.Message.Player != Player)
        {
            return;
        }

        if (CheckForChanges(e.Message.Player))
        {
            InvokeAsync(StateHasChanged);
        }
    }

    private void ReceivePlayerLoginEvent(object sender, ScrimMessageEventArgs<PlayerLoginMessage> e)
    {
        return; // TODO: add special styling/animation for this event?
    }

    private void ReceivePlayerLogoutEvent(object sender, ScrimMessageEventArgs<PlayerLogoutMessage> e)
    {
        return; // TODO: add special styling/animation for this event?
    }

    private void ReceiveScrimDeathActionEvent(object sender, ScrimMessageEventArgs<ScrimDeathActionEventMessage> e)
    {
        ScrimDeathActionEvent deathEvent = e.Message.DeathEvent;

        if (deathEvent.AttackerPlayer != Player && deathEvent.VictimPlayer != Player)
        {
            return;
        }

        if (deathEvent.VictimPlayer == Player)
        {
            _lastDeathTime = deathEvent.Timestamp;
        }

        ScrimKillfeedEvent killfeedEvent = ConvertToKillfeedEvent(deathEvent);
        _eventsQueue.Enqueue(killfeedEvent);

        UpdateRenderedStatus();
    }

    private void ReceiveScrimReviveActionEvent(object sender, ScrimMessageEventArgs<ScrimReviveActionEventMessage> e)
    {
        ScrimReviveActionEvent reviveEvent = e.Message.ReviveEvent;

        if (reviveEvent.MedicPlayer != Player && reviveEvent.RevivedPlayer != Player)
        {
            return;
        }

        if (reviveEvent.RevivedPlayer == Player)
        {
            _lastRevivedTime = reviveEvent.Timestamp;
        }

        ScrimKillfeedEvent killfeedEvent = ConvertToKillfeedEvent(reviveEvent);
        _eventsQueue.Enqueue(killfeedEvent);

        UpdateRenderedStatus();
    }

    private void ReceiveScrimObjectiveTickActionEvent(object sender, ScrimMessageEventArgs<ScrimObjectiveTickActionEventMessage> e)
    {
        ScrimObjectiveTickActionEvent objectiveTickEvent = e.Message.ObjectiveTickEvent;
        ScrimActionType actionType = objectiveTickEvent.ActionType;

        if (objectiveTickEvent.Player != Player || (actionType != ScrimActionType.ObjectiveCapturePulse && actionType != ScrimActionType.ObjectiveDefensePulse))
        {
            return;
        }

        ScrimKillfeedEvent killfeedEvent = ConvertToKillfeedEvent(objectiveTickEvent);
        _eventsQueue.Enqueue(killfeedEvent);

        UpdateRenderedStatus();
    }

    private void ReceivePlayerNameDisplayChangeMessageEvent(object sender, ScrimMessageEventArgs<PlayerNameDisplayChangeMessage> e)
    {
        if (e.Message.Player.Id == Player.Id)
        {
            InvokeAsync(StateHasChanged);
        }
    }

    private void ReceiveMatchStateUpdateEvent(object sender, ScrimMessageEventArgs<MatchStateUpdateMessage> e)
    {
        if (!CurrentRoundOnly || NoScore)
        {
            return;
        }

        int oldCurrentRound = _currentRound;
        int newCurrentRound = e.Message.CurrentRound;

        if (oldCurrentRound != newCurrentRound)
        {
            _currentRound = newCurrentRound;

            if (!Player.EventAggregateTracker.RoundHistory.TryGetValue(_currentRound, out var roundStats))
            {
                roundStats = Player.EventAggregateTracker.RoundStats;
            }

            int newNetScore = roundStats.NetScore;
            if (_renderedNetScore != newNetScore)
            {
                _renderedNetScore = newNetScore;

                InvokeAsync(StateHasChanged);
            }
        }
    }
    #endregion

    #region ScrimKillfeedEvent Conversions
    private ScrimKillfeedEvent ConvertToKillfeedEvent(ScrimDeathActionEvent deathEvent)
    {
        string weaponName = deathEvent.Weapon?.Name;
        if (string.IsNullOrWhiteSpace(weaponName))
        {
            weaponName = "Unknown Weapon";
        }

        return new ScrimKillfeedEvent
        {
            ActingPlayer = deathEvent.AttackerPlayer,
            RecipientPlayer = deathEvent.VictimPlayer,
            Timestamp = deathEvent.Timestamp,
            EventType = KillfeedEventType.Kill,
            WeaponName = weaponName,
            Points = deathEvent.Points,
            IsHeadshot = deathEvent.IsHeadshot,
            PreviousRenderTime = DateTime.Now,
            FirstRenderTime = DateTime.Now,
            EffectiveDurationMilliseconds = DeathEventEffectiveDurationMs
        };
    }

    private ScrimKillfeedEvent ConvertToKillfeedEvent(ScrimReviveActionEvent reviveEvent)
    {
        return new ScrimKillfeedEvent
        {
            ActingPlayer = reviveEvent.MedicPlayer,
            RecipientPlayer = reviveEvent.RevivedPlayer,
            Timestamp = reviveEvent.Timestamp,
            EventType = KillfeedEventType.Revive,
            WeaponName = "Revive",
            Points = reviveEvent.Points,
            PreviousRenderTime = DateTime.Now,
            FirstRenderTime = DateTime.Now,
            EffectiveDurationMilliseconds = ReviveEventEffectiveDurationMs
        };
    }

    private ScrimKillfeedEvent ConvertToKillfeedEvent(ScrimObjectiveTickActionEvent objectiveTickEvent)
    {
        return new ScrimKillfeedEvent
        {
            ActingPlayer = objectiveTickEvent.Player,
            Timestamp = objectiveTickEvent.Timestamp,
            EventType = KillfeedEventType.PointControl,
            Points = objectiveTickEvent.Points,
            PreviousRenderTime = DateTime.Now,
            FirstRenderTime = DateTime.Now,
            EffectiveDurationMilliseconds = ObjectiveTickEventEffectiveDurationMs
        };
    }
    #endregion ScrimKillfeedEvent Conversions

    private void UpdateRenderedStatus()
    {
        _autoEvent.WaitOne();

        InvokeAsync(() =>
        {
            if (!_eventsQueue.TryDequeue(out ScrimKillfeedEvent newEvent))
            {
                _renderedStatus = PlayerStatus.Alive;
                _timer.Change(Timeout.Infinite, Timeout.Infinite);

                StateHasChanged();
                _autoEvent.Set();

                return;
            }

            KillfeedEventType eventType = newEvent.EventType;
            int eventDuration = newEvent.EffectiveDurationMilliseconds;
            bool playerIsActor = (newEvent.ActingPlayer == Player);

            DateTime newTimestamp = newEvent.Timestamp;

            double secondsSinceLastRenderedDeath = (newTimestamp - _lastRenderedDeathTime).TotalSeconds;

            if (eventType == KillfeedEventType.Kill)
            {
                if (playerIsActor)
                {
                    if (_renderedStatus != PlayerStatus.ContestingObjective && secondsSinceLastRenderedDeath > 7)
                    {
                        _renderedStatus = PlayerStatus.Alive;
                        _timer.Change(Timeout.Infinite, Timeout.Infinite);

                        StateHasChanged();
                        _autoEvent.Set();
                        return;
                    }
                }
                else
                {
                    _renderedStatus = PlayerStatus.Respawning;
                    _timer.Change(eventDuration, Timeout.Infinite);

                    StateHasChanged();
                    _autoEvent.Set();
                    return;
                }
            }
            else if (eventType == KillfeedEventType.Revive)
            {
                if (playerIsActor)
                {
                    if (_renderedStatus != PlayerStatus.ContestingObjective && secondsSinceLastRenderedDeath > 7)
                    {
                        _renderedStatus = PlayerStatus.Alive;
                        _timer.Change(Timeout.Infinite, Timeout.Infinite);

                        StateHasChanged();
                        _autoEvent.Set();
                        return;
                    }
                }
                else
                {
                    if (_renderedStatus == PlayerStatus.Respawning)
                    {
                        _renderedStatus = PlayerStatus.Revived;
                        _timer.Change(eventDuration, Timeout.Infinite);

                        StateHasChanged();
                        _autoEvent.Set();
                        return;
                    }
                }
            }
            else if (eventType == KillfeedEventType.PointControl)
            {
                if (!playerIsActor)
                {
                    _autoEvent.Set();
                    return;
                }

                if (_renderedStatus == PlayerStatus.ContestingObjective || _renderedStatus == PlayerStatus.Alive || _renderedStatus == PlayerStatus.Revived)
                {
                    _renderedStatus = PlayerStatus.ContestingObjective;
                    _timer.Change(eventDuration, Timeout.Infinite);

                    StateHasChanged();
                    _autoEvent.Set();
                    return;
                }
            }
        });

        _autoEvent.Set();
    }

    #region Timer Handling
    private void InitializeTimer()
    {
        _autoEvent.WaitOne();

        _timer = new Timer(HandleTimerTick, _autoEvent, Timeout.Infinite, Timeout.Infinite);

        _autoEvent.Set();
    }

    private void HandleTimerTick(object stateInfo)
    {
        UpdateRenderedStatus();
    }
    #endregion Timer Handling

    private bool CheckForChanges(Player player)
    {
        bool stateHasChanged = false;

        if (CurrentRoundOnly && !NoScore)
        {
            _currentRound = ScrimMatchEngine.GetCurrentRound();

            if (!player.EventAggregateTracker.TryGetTargetRoundStats(_currentRound, out ScrimEventAggregate roundStats))
            {
                roundStats = player.EventAggregateTracker.RoundStats;
            }

            int playerNetScore = roundStats.NetScore;

            if (playerNetScore != _renderedNetScore)
            {
                _renderedNetScore = playerNetScore;
                stateHasChanged = true;
            }
        }
        else if (!CurrentRoundOnly && !NoScore)
        {
            int playerNetScore = player.EventAggregate.NetScore;

            if (playerNetScore != _renderedNetScore)
            {
                _renderedNetScore = playerNetScore;
                stateHasChanged = true;
            }
        }

        return stateHasChanged;
    }

    private string GetContainerCssClass()
    {
        if (_renderedStatus == PlayerStatus.Respawning)
        {
            return "deadTextPlay";
        }
        else if (_renderedStatus == PlayerStatus.Revived)
        {
            return "revivedFlashPlay";
        }
        else
        {
            return string.Empty;
        }
    }

    private void SetNoScoreCssClass()
    {
        _noScoreCssClass = NoScore ? CssNoScoreClass : string.Empty;
    }

    private string GetNetScoreLabelCssClass()
    {
        if (_renderedNetScore == 0)
        {
            return "neutral";
        }
        else if (_renderedNetScore < 0)
        {
            return "negative";
        }
        else if (_renderedNetScore > 0)
        {
            return "positive";
        }
        else
        {
            return string.Empty;
        }
    }

    private string GetNetScoreLabelText()
    {
        if (_renderedNetScore == 0)
        {
            return "•";
        }
        else
        {
            return "Δ";
        }
    }
}
