@using squittal.ScrimPlanetmans.ScrimMatch.Models;

@if (_renderedStatsType != null && _renderedStatsType == OverlayStatsDisplayType.InfantryScores)
{
    <div id="MatchStats" class="match-report infantry @GetReportCss()">

        @if (CompactLayout)
        {
            <div class="team-report-container team1">
                <InfantryMatchReportTeam TeamOrdinal=1 ShowHsr=ShowHsr UseObjectiveStats=false />
            </div>
            <div class="team-report-container team2">
                <InfantryMatchReportTeam TeamOrdinal=2 ShowHsr=ShowHsr UseObjectiveStats=false />
            </div>
        }
        else
        {
            <InfantryMatchReportTeam TeamOrdinal=1 ShowHsr=ShowHsr UseObjectiveStats=false />
            <InfantryMatchReportTeam TeamOrdinal=2 ShowHsr=ShowHsr UseObjectiveStats=false />
        }

    </div>
}
else if (_renderedStatsType != null && _renderedStatsType == OverlayStatsDisplayType.InfantryObjective)
{
    <div id="MatchStats" class="match-report infantry @GetReportCss()">

        @if (CompactLayout)
        {
            <div class="team-report-container team1">
                <InfantryMatchReportTeam TeamOrdinal=1 ShowHsr=ShowHsr UseObjectiveStats=true />
            </div>
            <div class="team-report-container team2">
                <InfantryMatchReportTeam TeamOrdinal=2 ShowHsr=ShowHsr UseObjectiveStats=true />
            </div>
        }
        else
        {
            <InfantryMatchReportTeam TeamOrdinal=1 ShowHsr=ShowHsr UseObjectiveStats=true />
            <InfantryMatchReportTeam TeamOrdinal=2 ShowHsr=ShowHsr UseObjectiveStats=true />
        }

    </div>
}

@code {
    private const string CssNoHsrClass = "no-hsr";
    private const string CssObjectiveStatsClass = "objective-stats";
    private const string CssCompactLayoutClass = "compact";
    private const string CssShowScoresClass = "status-scores";

    private OverlayStatsDisplayType? _renderedStatsType;
    private bool? _renderedShowPlayerScores;

    private bool _resolvedShowScores = true;

    [Parameter]
    public bool ShowHsr { get; set; } = MatchOverlay.DefaultShowHsr;

    [Parameter]
    public bool CompactLayout { get; set; }

    [Parameter]
    public OverlayStatsDisplayType StatsType { get; set; }

    [Parameter]
    public bool? ShowPlayerScores { get; set; }

    #region Initialization Methods
    protected override void OnParametersSet()
    {
        bool showScoreSettingsChanged = false;

        if (_renderedStatsType != StatsType)
        {
            _renderedStatsType = (StatsType == OverlayStatsDisplayType.InfantryObjective) ? StatsType : MatchOverlay.DefaultStatsType;
            showScoreSettingsChanged = true;
        }

        if (ShowPlayerScores != _renderedShowPlayerScores)
        {
            _renderedShowPlayerScores = ShowPlayerScores;
            showScoreSettingsChanged = true;
        }

        if (showScoreSettingsChanged)
        {
            bool showScoresChanged = ResolveShowPlayerScores();
            if (showScoresChanged)
            {
                InvokeAsyncStateHasChanged();
            }
        }
    }
    #endregion Initialization Methods

    private string GetReportCss()
    {
        string hsrCssClass = ShowHsr ? string.Empty : CssNoHsrClass;
        string statsCssClass = (_renderedStatsType == OverlayStatsDisplayType.InfantryObjective) ? CssObjectiveStatsClass : string.Empty;
        string compactCssClass = CompactLayout ? CssCompactLayoutClass : string.Empty;
        string scores = _resolvedShowScores ? CssShowScoresClass : string.Empty;

        return $"{hsrCssClass} {statsCssClass} {compactCssClass} {scores}";
    }

    private bool ResolveShowPlayerScores()
    {
        bool? previousShowScores = _renderedShowPlayerScores;

        if (_renderedShowPlayerScores != null)
        {
            _resolvedShowScores = _renderedShowPlayerScores.Value;

            return _resolvedShowScores != previousShowScores;
        }

        _resolvedShowScores = _renderedStatsType switch
        {
            OverlayStatsDisplayType.InfantryScores => true,
            OverlayStatsDisplayType.InfantryObjective => false,
            OverlayStatsDisplayType.AirVehicleScores => true,
            OverlayStatsDisplayType.GroundVehicleScores => true,
            OverlayStatsDisplayType.CombinedArmsObjective => false,
            _ => true
        };

        return _resolvedShowScores != previousShowScores;
    }

    private void InvokeAsyncStateHasChanged() => InvokeAsync(StateHasChanged);
}