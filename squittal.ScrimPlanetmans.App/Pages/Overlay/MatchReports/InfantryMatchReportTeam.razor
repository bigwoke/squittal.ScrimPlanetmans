@using squittal.ScrimPlanetmans.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;
@using System.Collections.Concurrent;
@using squittal.ScrimPlanetmans.Models;

@inject IScrimTeamsManager ScrimTeamsManager
@inject IScrimMessageBroadcastService MessageService

@implements IDisposable

@if (_team != null && _renderedPlayersCount > 0)
{
    <div id="@($"T{TeamOrdinal}Stats")" class="team-report @($"team{TeamOrdinal}") @SqCssHelper.GetFactionClassFromId(_team.FactionId)">
        <div id="@($"T{TeamOrdinal}Stats-header")" class="stats-row-header">

            @if (!UseObjectiveStats)
            {
                <div class="net stats-col-header">Net<br>Score</div>
                <div class="score stats-col-header">Total Points</div>
            }
            else
            {
                <div class="score stats-col-header">Score</div>
            }

            <div class="kills stats-col-header">Kills</div>
            <div class="deaths stats-col-header">Deaths</div>

            @if (ShowHsr && !UseObjectiveStats)
            {
                <div class="hsr stats-col-header">HSR</div>
            }

            @if (UseObjectiveStats)
            {
                <div class="objective-ticks stats-col-header">Capture<br>Ticks</div>
                <div class="revives stats-col-header">Revives<br>Given</div>
                <div class="revives-taken stats-col-header">Revives<br>Taken</div>
            }

            <div class="assists stats-col-header">Damage<br>Assists</div>
            <div class="utils stats-col-header">Grenade<br>Assists</div>
        </div>

        <InfantryMatchReportTeamRow TeamOrdinal=TeamOrdinal ShowHsr=ShowHsr UseObjectiveStats=UseObjectiveStats />

        @lock (_renderedPlayers)
        {
            @foreach (Player player in _renderedPlayers)
            {
                <InfantryMatchReportPlayerStatsRow Player=player ShowHsr=ShowHsr UseObjectiveStats=UseObjectiveStats />
            }
        }

        <InfantryMatchReportTeamCapturePointsRow TeamOrdinal=TeamOrdinal />

        <InfantryMatchReportTeamPointAdjustmentsRow TeamOrdinal=TeamOrdinal />
    </div>
}

@code {
    private Team _team;
    private List<Player> _renderedPlayers = new List<Player>();
    private int _renderedPlayersCount = 0;
    private ConcurrentQueue<TeamPlayerChangeMessage> _teamPlayerQueue = new ConcurrentQueue<TeamPlayerChangeMessage>();

    [Parameter]
    public int TeamOrdinal { get; set; }

    [Parameter]
    public bool ShowHsr { get; set; } = MatchOverlay.DefaultShowHsr;

    [Parameter]
    public bool UseObjectiveStats { get; set; }


    #region Initialization Methods
    protected override void OnInitialized()
    {
        MessageService.RaiseTeamPlayerChangeEvent += ReceiveTeamPlayerChangeEvent;
        MessageService.RaisePlayerStatUpdateEvent += ReceivePlayerStatUpdateEvent;
        MessageService.RaiseTeamFactionChangeEvent += ReceiveTeamFactionChangeEvent;

        if (_team == null)
        {
            _team = ScrimTeamsManager.GetTeam(TeamOrdinal);
        }
    }

    protected override void OnParametersSet()
    {
        _team = ScrimTeamsManager.GetTeam(TeamOrdinal);

        InvokeAsync(() =>
        {
            lock (_renderedPlayers)
            {
                IEnumerable<Player> visiblePlayers = _team.Players.Where(p => (p.IsParticipating) && !_renderedPlayers.Contains(p));

                _renderedPlayers.AddRange(visiblePlayers);
                _renderedPlayersCount = _renderedPlayers.Count();

                // TEST:
                _renderedPlayers = _renderedPlayers.OrderByDescending(p => p.LoadoutId).ToList();

                StateHasChanged();
            }
        });
    }

    public void Dispose()
    {
        MessageService.RaiseTeamPlayerChangeEvent -= ReceiveTeamPlayerChangeEvent;
        MessageService.RaisePlayerStatUpdateEvent -= ReceivePlayerStatUpdateEvent;
        MessageService.RaiseTeamFactionChangeEvent -= ReceiveTeamFactionChangeEvent;
    }
    #endregion Initialization Methods

    #region Event Handling
    private void ReceivePlayerStatUpdateEvent(object sender, ScrimMessageEventArgs<PlayerStatUpdateMessage> e)
    {
        Player player = e.Message.Player;

        if (player.TeamOrdinal != TeamOrdinal)
        {
            return;
        }

        TeamPlayerChangeType changeType = (player.IsParticipating) ? TeamPlayerChangeType.Add : TeamPlayerChangeType.Remove;

        TeamPlayerChangeMessage changeMessage = new TeamPlayerChangeMessage(player, changeType);
        _teamPlayerQueue.Enqueue(changeMessage);

        UpdateRenderedPlayers();
    }

    private void ReceiveTeamPlayerChangeEvent(object sender, ScrimMessageEventArgs<TeamPlayerChangeMessage> e)
    {
        Player player = e.Message.Player;

        if (player.TeamOrdinal != TeamOrdinal)
        {
            return;
        }

        _teamPlayerQueue.Enqueue(e.Message);

        UpdateRenderedPlayers();
    }

    private void ReceiveTeamFactionChangeEvent(object sender, ScrimMessageEventArgs<TeamFactionChangeMessage> e)
    {
        if (e.Message.TeamOrdinal != TeamOrdinal)
        {
            return;
        }

        InvokeAsync(StateHasChanged);
    }
    #endregion Event Handling

    private void UpdateRenderedPlayers()
    {
        InvokeAsync(() =>
        {
            lock (_renderedPlayers)
            {
                while (_teamPlayerQueue.TryDequeue(out TeamPlayerChangeMessage changeMessage))
                {
                    Player player = changeMessage.Player;

                    if (changeMessage.ChangeType == TeamPlayerChangeType.Remove)
                    {
                        _renderedPlayers.Remove(player);
                    }
                    else if (changeMessage.ChangeType == TeamPlayerChangeType.Add)
                    {
                        if (!_renderedPlayers.Contains(player) && player.IsParticipating)
                        {
                            _renderedPlayers.Add(player);
                        }
                    }
                }

                _renderedPlayersCount = _renderedPlayers.Count();

                // TEST:
                _renderedPlayers = _renderedPlayers.OrderByDescending(p => p.LoadoutId).ToList();

                StateHasChanged();
            }
        });
    }
}
