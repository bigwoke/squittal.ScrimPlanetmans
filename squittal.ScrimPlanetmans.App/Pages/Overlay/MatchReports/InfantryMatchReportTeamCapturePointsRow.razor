@using squittal.ScrimPlanetmans.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;

@inject IScrimTeamsManager ScrimTeamsManager
@inject IScrimMessageBroadcastService MessageService

@implements IDisposable

@if (_team != null)
{
    if (_team.EventAggregate.CapturePoints != 0)
    {
        <div id="@($"{_team.Alias}-adjustmentsRow")" class="stats-row adjustments">
            <div id="@($"{_team.Alias}-adjustmentsLabel")" class="label">Captures</div>
            <div id="@($"{_team.Alias}-adjustmentsPoints")" class="score stats-value" style="opacity: @GetStatOpacity(_renderedEventAggregate.CapturePoints);">@GetPointsDisplay()</div>
        </div>
    }
}

@code {
    private Team _team;
    private ScrimEventAggregate _renderedEventAggregate = new ScrimEventAggregate();

    [Parameter]
    public int TeamOrdinal { get; set; }

    #region Initialization Methods
    protected override void OnInitialized()
    {
        MessageService.RaiseTeamStatUpdateEvent += ReceiveTeamStatUpdateEvent;
    }

    public void Dispose()
    {
        MessageService.RaiseTeamStatUpdateEvent -= ReceiveTeamStatUpdateEvent;
    }

    protected override void OnParametersSet()
    {
        _team = ScrimTeamsManager.GetTeam(TeamOrdinal);
        _renderedEventAggregate = new ScrimEventAggregate();
        _renderedEventAggregate.Add(_team.EventAggregate);
    }
    #endregion Initialization Methods

    #region Event Handling
    private void ReceiveTeamStatUpdateEvent(object sender, ScrimMessageEventArgs<TeamStatUpdateMessage> e)
    {
        Team team = e.Message.Team;

        if (team.TeamOrdinal == TeamOrdinal)
        {
            if (RenderedStatsHaveChanged(team.EventAggregate))
            {
                _renderedEventAggregate = new ScrimEventAggregate();
                _renderedEventAggregate.Add(_team.EventAggregate);

                InvokeAsync(StateHasChanged);
            }
        }
    }
    #endregion EventHandling

    private bool RenderedStatsHaveChanged(ScrimEventAggregate newAggregate)
    {
        if (_renderedEventAggregate.CapturePoints != newAggregate.CapturePoints)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private string GetPointsDisplay()
    {
        int points = _renderedEventAggregate.CapturePoints;

        if (points >= 0)
        {
            return $"+{points}";
        }
        else
        {
            return points.ToString();
        }
    }

    private static double GetStatOpacity(int value)
    {
        return (value != 0)
            ? 1.0
            : 0.5;
    }
}
