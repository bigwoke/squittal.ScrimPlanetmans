@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.Models;
@using System.Threading;

@if (KillfeedEvent != null)
{
    <tr class="">
        <td class="killfeedRowContainer @_cssClass">
            <div class="killfeedHeadshot killfeedCell @GetHeadshotClass(KillfeedEvent.IsHeadshot) @SqCssHelper.GetFactionClassFromId(KillfeedEvent.ActingPlayer?.FactionId)">
                @if (Debug)
                {
                    @_debug
                }
            </div>
            <div class="killfeedWinner killfeedPlayer killfeedCell @SqCssHelper.GetFactionClassFromId(KillfeedEvent.ActingPlayer?.FactionId)">@GetPlayerName(KillfeedEvent.ActingPlayer)</div>
            <div class="killfeedPoints killfeedCell ">@KillfeedEvent.PointsDisplay</div>
            <div class="killfeedWeapon killfeedCell">@KillfeedEvent.WeaponName</div>
            <div class="killfeedLoser killfeedPlayer killfeedCell @SqCssHelper.GetFactionClassFromId(KillfeedEvent.RecipientPlayer?.FactionId)">@GetPlayerName(KillfeedEvent.RecipientPlayer)</div>
        </td>
    </tr>
}

@code {
    private const int MaxRowLifetimeMs = 8000;
    private const string CssAnimateOutClass = "animateOut";
    private const string CssAnimateInClass = "animateIn";
    private const string CssResetClass = "";

    private readonly AutoResetEvent _autoEvent = new AutoResetEvent(true);

    private string _debug = "$";
    private string _cssClass = CssResetClass;
    private DateTime _firstRenderTimestamp;
    private DateTime _paramSetTimestamp;
    private DateTime _prevTimestamp;
    private Timer _timer;

    [Parameter]
    public ScrimKillfeedEvent KillfeedEvent { get; set; }

    [Parameter]
    public int Index { get; set; }

    [Parameter]
    public bool Debug { get; set; } = false;

    #region Initialization Methods
    protected override void OnInitialized()
    {
        InitializeTimer();
    }

    protected override void OnParametersSet()
    {
        DateTime timestamp = KillfeedEvent.Timestamp;

        _firstRenderTimestamp = KillfeedEvent.FirstRenderTime;
        _paramSetTimestamp = DateTime.Now;

        if (timestamp != _prevTimestamp)
        {
            _prevTimestamp = timestamp;
            _paramSetTimestamp = DateTime.Now;

            KillfeedEvent.PreviousRenderTime = _paramSetTimestamp;

            ReConfigureTimer();

            if (KillfeedEvent.IsExpired)
            {
                _cssClass = CssAnimateOutClass;
            }
            else
            {
                _cssClass = Index == 0 ? CssAnimateInClass : CssResetClass;
            }

            _debug = (_debug == "&") ? "@" : "&";
            StateHasChanged();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (KillfeedEvent.IsExpired)
        {
            _cssClass = CssAnimateOutClass;
        }
        else
        {
            _cssClass = CssResetClass;
        }
    }
    #endregion Initialization Methods

    #region Timer Handling
    private void InitializeTimer()
    {
        _autoEvent.WaitOne();

        _timer = new Timer(HandleTimerTick, _autoEvent, Timeout.Infinite, MaxRowLifetimeMs);

        _autoEvent.Set();
    }

    private void ReConfigureTimer()
    {
        _autoEvent.WaitOne();

        int timeRendered = (int)(_paramSetTimestamp - _firstRenderTimestamp).TotalMilliseconds;
        int timeRemaining = MaxRowLifetimeMs - timeRendered;

        if (timeRemaining <= 0)
        {
            _timer.Change(Timeout.Infinite, Timeout.Infinite);

            InvokeAsync(() =>
            {
                KillfeedEvent.IsExpired = true;

                _cssClass = CssAnimateOutClass;

                StateHasChanged();
            });
        }
        else
        {
            _timer.Change(timeRemaining, Timeout.Infinite);
        }

        _autoEvent.Set();
    }

    private void HandleTimerTick(object stateInfo)
    {
        _autoEvent.WaitOne();

        InvokeAsync(() =>
        {
            KillfeedEvent.IsExpired = true;

            _cssClass = CssAnimateOutClass;

            StateHasChanged();
        });

        _autoEvent.Set();
    }
    #endregion Timer Handling

    private string GetPlayerName(Player player)
    {
        if (player == null)
        {
            return "Unknown Player";
        }
        else
        {
            return player.NameDisplay;
        }
    }

    private string GetHeadshotClass(bool? isHeadshot)
    {
        if (isHeadshot.GetValueOrDefault())
        {
            return "headshot";
        }
        else
        {
            return string.Empty;

        }
    }
}
