@using squittal.ScrimPlanetmans.CensusStream;
@using squittal.ScrimPlanetmans.Models.Planetside;
@using squittal.ScrimPlanetmans.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.Services.Planetside;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;
@using System.Collections.Concurrent;
@using squittal.ScrimPlanetmans.Models;

@inject IScrimTeamsManager ScrimTeamsManager
@inject IWebsocketMonitor WebsocketMonitor
@inject IScrimMatchEngine ScrimMatchEngine
@inject IOutfitService OutfitService
@inject IWorldService WorldService
@inject IFactionService FactionService
@inject IScrimMessageBroadcastService MessageService

@implements IDisposable

<div class="killfeed" id="killfeedContainer" style="@(GetFeedTopMarginString())">
    <table>
        <tbody id="killfeed" class="killfeedBody">
            @for (var i = 0; i <= 3; i++)
            {
                @if (_renderedEvents[i] != null)
                {
                    <FeedRow i_killfeedEvent=_renderedEvents[i] i_index=i />
                }
            }
        </tbody>
    </table>
</div>

@code {
    [Parameter]
    public bool i_legacyUi { get; set; } = false;
    private bool _legacyUi { get; set; } = false;

    private ScrimKillfeedEvent[] _renderedEvents { get; set; } = new ScrimKillfeedEvent[4];

    private bool _isShowingPointTarget { get; set; } = false;
    private int _renderedEventCount { get; set; } = 0;
    private ConcurrentQueue<ScrimKillfeedEvent> _eventsQueue { get; set; } = new ConcurrentQueue<ScrimKillfeedEvent>();


    #region Initialization Methods
    protected override void OnInitialized()
    {
        MessageService.RaiseScrimDeathActionEvent += ReceiveScrimDeathActionEvent;
        MessageService.RaiseScrimReviveActionEvent += ReceiveScrimReviveActionEvent;

        _isShowingPointTarget = ScrimMatchEngine.MatchConfiguration.EndRoundOnPointValueReached;
    }

    public void Dispose()
    {
        MessageService.RaiseScrimDeathActionEvent -= ReceiveScrimDeathActionEvent;
        MessageService.RaiseScrimReviveActionEvent -= ReceiveScrimReviveActionEvent;
    }

    protected override void OnParametersSet()
    {
        if (i_legacyUi != _legacyUi)
        {
            _legacyUi = i_legacyUi;

            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
    }
    #endregion InitializationMethods

    #region Event Handling
    private void ReceiveScrimDeathActionEvent(object sender, ScrimMessageEventArgs<ScrimDeathActionEventMessage> e)
    {
        var deathEvent = e.Message.DeathEvent;

        if (DoesEventInvolveBenchedPlayers(deathEvent.AttackerPlayer, deathEvent.VictimPlayer))
        {
            return;
        }

        var killfeedEvent = ConvertToKillfeedEvent(deathEvent);

        _eventsQueue.Enqueue(killfeedEvent);

        UpdateRenderedEvents();
    }

    private void ReceiveScrimReviveActionEvent(object sender, ScrimMessageEventArgs<ScrimReviveActionEventMessage> e)
    {
        var reviveEvent = e.Message.ReviveEvent;

        if (DoesEventInvolveBenchedPlayers(reviveEvent.MedicPlayer, reviveEvent.RevivedPlayer))
        {
            return;
        }

        var killfeedEvent = ConvertToKillfeedEvent(reviveEvent, KillfeedEventType.Revive);

        _eventsQueue.Enqueue(killfeedEvent);

        if (reviveEvent.EnemyPoints != 0) // && reviveEvent.LastKilledByPlayer != null)
        {
            var enemyKillfeedEvent = ConvertToKillfeedEvent(reviveEvent, KillfeedEventType.ReviveTaken);

            _eventsQueue.Enqueue(enemyKillfeedEvent);
        }

        UpdateRenderedEvents();
    }

    private void ReceiveScrimObjectiveTickActionEvent(object sender, ScrimMessageEventArgs<ScrimObjectiveTickActionEventMessage> e)
    {
        var objectiveTickEvent = e.Message.ObjectiveTickEvent;

        UpdateRenderedEvents();
    }

    private bool DoesEventInvolveBenchedPlayers(Player player1, Player player2)
    {
        return ((player1 != null && player1.IsBenched) || (player2 != null && player2.IsBenched));
    }

    #endregion Event Handling

    #region ScrimKillfeedEvent Conversions
    private ScrimKillfeedEvent ConvertToKillfeedEvent(ScrimDeathActionEvent deathEvent)
    {
        var weaponName = deathEvent.Weapon?.Name;
        if (string.IsNullOrWhiteSpace(weaponName))
        {
            weaponName = "Unknown Weapon";
        }

        return new ScrimKillfeedEvent
        {
            ActingPlayer = deathEvent.AttackerPlayer,
            RecipientPlayer = deathEvent.VictimPlayer,
            Timestamp = deathEvent.Timestamp,
            EventType = KillfeedEventType.Kill,
            WeaponName = weaponName,
            Points = deathEvent.Points,
            IsHeadshot = deathEvent.IsHeadshot,
            PreviousRenderTime = DateTime.Now,
            FirstRenderTime = DateTime.Now
        };
    }

    private ScrimKillfeedEvent ConvertToKillfeedEvent(ScrimReviveActionEvent reviveEvent, KillfeedEventType eventType)
    {
        var actingPlayer = (eventType == KillfeedEventType.ReviveTaken) ? reviveEvent.LastKilledByPlayer : reviveEvent.MedicPlayer;
        var recipientPlayer = (eventType == KillfeedEventType.ReviveTaken) ? reviveEvent.RevivedPlayer : reviveEvent.RevivedPlayer;
        var weaponName = (eventType == KillfeedEventType.ReviveTaken) ? "Revive Allowed" : "Revive";
        var points = (eventType == KillfeedEventType.ReviveTaken) ? reviveEvent.EnemyPoints : reviveEvent.Points;

        return new ScrimKillfeedEvent
        {
            ActingPlayer = actingPlayer,
            RecipientPlayer = recipientPlayer,
            Timestamp = reviveEvent.Timestamp,
            EventType = eventType,
            WeaponName = weaponName,
            Points = points,
            PreviousRenderTime = DateTime.Now,
            FirstRenderTime = DateTime.Now
        };

        //return new ScrimKillfeedEvent
        //{
        //    ActingPlayer = reviveEvent.MedicPlayer,
        //    RecipientPlayer = reviveEvent.RevivedPlayer,
        //    Timestamp = reviveEvent.Timestamp,
        //    EventType = KillfeedEventType.Revive,
        //    WeaponName = "Revive",
        //    Points = reviveEvent.Points,
        //    PreviousRenderTime = DateTime.Now,
        //    FirstRenderTime = DateTime.Now
        //};
    }
    #endregion ScrimKillfeedEvent Conversions

    private void UpdateRenderedEvents()
    {
        InvokeAsync(() =>
        {
            while (_eventsQueue.TryDequeue(out ScrimKillfeedEvent newEvent))
            {
                lock (_renderedEvents)
                {
                    for (var i = 3; i > 0; i--)
                    {
                        _renderedEvents[i] = _renderedEvents[i - 1];
                    }

                    _renderedEvents[0] = newEvent;

                    StateHasChanged();
                }

            }

            StateHasChanged();
        });
    }

    private string GetPlayerName(Player player)
    {
        if (player == null)
        {
            return "Unknown Player";
        }
        else
        {
            return player.NameDisplay;
        }
    }

    private string GetFeedTopMarginString()
    {
        if (_isShowingPointTarget)
        {
            return "margin-top: 6px;";
        }
        else
        {
            return string.Empty;
        }
    }
}