@using squittal.ScrimPlanetmans.App.Services
@using squittal.ScrimPlanetmans.Models.MessageLogs;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;
@using System.Collections.Concurrent;

@inject IScrimMessageBroadcastService MessageService
@inject TimeZoneService TZService

@implements IDisposable

<p style="margin: 0 0 0.1rem 0; font-size: 12px; color: var(--sq-logo-purple);">Stream Log</p>

@*<div style="margin: 0.2rem 0; font-size: 12px;" title="Unselect to hide OutsideInterference messages">
    <EditForm Model="@_displayOutsideInterferenceMessages">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputCheckbox id="showInterferenceCheckBox" @bind-Value="_displayOutsideInterferenceMessages" style="position: relative; top: 1px; font-size: 12px;" /> Outside Inferference
    </EditForm>
</div>*@

<div style="height: 300px; overflow-y: auto; border: 1px solid var(--sq-light-blue-gray-alpha); background-color: white;">
    @if (_streamLogMessages.Any())
    {
        foreach (var log in _streamLogMessages)
        {
            <p style="font-size: 10.5px; margin: 0 0 0.1rem 0;">@log.Message</p>
        }

        if (_logCount > _maxLogCount)
        {
            <p style="font-size: 10.5px; margin: 0;">...max log entries reached (showing @_maxLogCount / @_streamLogMessages.Count)</p>
        }
    }
</div>


@code {
    private List<TimestampedLogMessage> _streamLogMessages { get; set; } = new List<TimestampedLogMessage>();
    private ConcurrentQueue<TimestampedLogMessage> _logMessageQueue = new ConcurrentQueue<TimestampedLogMessage>();

    private bool _displayOutsideInterferenceMessages = true;

    private int _logCount;
    private int _maxLogCount = 200;

    #region Initilization Methods
    protected override void OnInitialized()
    {
        MessageService.RaiseScrimDeathActionEvent += ReceiveDeathActionEvent;
        MessageService.RaiseScrimVehicleDestructionActionEvent += ReceiveVehicleDestructionActionEvent;

        MessageService.RaiseScrimReviveActionEvent += ReceiveReviveActionEvent;
        MessageService.RaiseScrimAssistActionEvent += ReceiveAssistActionEvent;
        MessageService.RaiseScrimObjectiveTickActionEvent += ReceiveObjectiveTickActionEvent;
        MessageService.RaiseScrimFacilityControlActionEvent += ReceiveScrimFacilityControlActionEvent;
    }

    public void Dispose()
    {
        MessageService.RaiseScrimDeathActionEvent -= ReceiveDeathActionEvent;
        MessageService.RaiseScrimVehicleDestructionActionEvent += ReceiveVehicleDestructionActionEvent;

        MessageService.RaiseScrimReviveActionEvent -= ReceiveReviveActionEvent;
        MessageService.RaiseScrimAssistActionEvent -= ReceiveAssistActionEvent;
        MessageService.RaiseScrimObjectiveTickActionEvent -= ReceiveObjectiveTickActionEvent;
        MessageService.RaiseScrimFacilityControlActionEvent -= ReceiveScrimFacilityControlActionEvent;
    }
    #endregion Initilization Methods

    #region  Event Handling
    private async void ReceiveDeathActionEvent(object sender, ScrimMessageEventArgs<ScrimDeathActionEventMessage> e)
    {
        var message = e.Message;

        var isOutsideInterference = message.DeathEvent.ActionType == ScrimActionType.OutsideInterference;

        await LogMessage(message.GetLogLevelInfoMarkupString(), message.Timestamp, isOutsideInterference);
    }

    private async void ReceiveVehicleDestructionActionEvent(object sender, ScrimMessageEventArgs<ScrimVehicleDestructionActionEventMessage> e)
    {
        var message = e.Message;

        var isOutsideInterference = message.DestructionEvent.ActionType == ScrimActionType.OutsideInterference;

        await LogMessage(message.GetLogLevelInfoMarkupString(), message.Timestamp, isOutsideInterference);
    }

    private async void ReceiveReviveActionEvent(object sender, ScrimMessageEventArgs<ScrimReviveActionEventMessage> e)
    {
        var message = e.Message;

        var isOutsideInterference = message.ReviveEvent.ActionType == ScrimActionType.OutsideInterference;

        await LogMessage(message.GetLogLevelInfoMarkupString(), message.Timestamp, isOutsideInterference);
    }

    private async void ReceiveAssistActionEvent(object sender, ScrimMessageEventArgs<ScrimAssistActionEventMessage> e)
    {
        var message = e.Message;

        var isOutsideInterference = message.AssistEvent.ActionType == ScrimActionType.OutsideInterference;

        await LogMessage(message.GetLogLevelInfoMarkupString(), message.Timestamp, isOutsideInterference);
    }

    private async void ReceiveObjectiveTickActionEvent(object sender, ScrimMessageEventArgs<ScrimObjectiveTickActionEventMessage> e)
    {
        var message = e.Message;

        var isOutsideInterference = message.ObjectiveTickEvent.ActionType == ScrimActionType.OutsideInterference;

        await LogMessage(message.GetLogLevelInfoMarkupString(), message.Timestamp, isOutsideInterference);
    }

    private async void ReceiveScrimFacilityControlActionEvent(object sender, ScrimMessageEventArgs<ScrimFacilityControlActionEventMessage> e)
    {
        var message = e.Message;

        var isOutsideInterference = message.FacilityControl.ActionType == ScrimActionType.OutsideInterference;

        await LogMessage(message.GetLogLevelInfoMarkupString(), message.Timestamp, isOutsideInterference);
    }


    #endregion Event Handling

    private async Task LogMessage(MarkupString message, DateTime timestamp, bool isOutsideInterference)
    {
        if (isOutsideInterference && !_displayOutsideInterferenceMessages)
        {
            return;
        }

        DateTimeOffset local = await TZService.LocalizeAsync(timestamp);
        MarkupString newLogMessage = (MarkupString)$"<span style=\"font-weight: 600;\">{local:hh:mm:ss tt}:</span>  {message}";

        _logMessageQueue.Enqueue(new TimestampedLogMessage(timestamp, newLogMessage));
        UpdatePage();
    }

    private void UpdatePage()
    {
        InvokeAsync(() =>
        {
            lock (_streamLogMessages)
            {
                TimestampedLogMessage localString;

                while (_logMessageQueue.TryDequeue(out localString))
                {
                    _streamLogMessages.Add(localString);
                }

                _logCount = _streamLogMessages.Count();

                _streamLogMessages = _streamLogMessages.OrderByDescending(m => m.Timestamp).Take(_maxLogCount).ToList();

                StateHasChanged();
            }
        });
    }
}
