@page "/"
@page "/Admin"
@page "/MatchSetup"

@using squittal.ScrimPlanetmans.App.Pages.Shared;
@using squittal.ScrimPlanetmans.App.Pages.Admin.MatchSetup.MatchTeamComposer;
@using squittal.ScrimPlanetmans.CensusStream;
@using squittal.ScrimPlanetmans.Models.Planetside;
@using squittal.ScrimPlanetmans.Models.ScrimEngine
@using squittal.ScrimPlanetmans.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;
@using squittal.ScrimPlanetmans.Services.Planetside;
@using System.Threading;

@inject IScrimMessageBroadcastService MessageService
@inject IScrimMatchEngine ScrimMatchEngine
@inject IWebsocketMonitor WebsocketMonitor
@inject IScrimMatchScorer MatchScorer
@inject IItemService ItemService
@inject IFacilityService FacilityService
@inject IZoneService ZoneService
@inject IWorldService WorldService
@inject IScrimRulesetManager RulesetManager

@implements IDisposable

<div class="container-fluid">

    @if (!string.IsNullOrWhiteSpace(_errorBannerMessage))
    {
        <ErrorMessageBanner i_ErrorMessage="@_errorBannerMessage" />
    }

    <div class="row">

        <div class="col-lg-4">
            <TeamComposer i_teamOrdinal=1 />
        </div>

        <div class="col-lg-4">
            <TeamComposer i_teamOrdinal=2 />
        </div>

        <div class="col-lg-4">

            <div class="header-card-container default sans-serif-font">

                <div style="display: grid; grid-template-columns: 1fr 115px;">
                    @if (string.IsNullOrWhiteSpace(ScrimMatchEngine.Config.Title))
                    {
                        <h5>@(_currentRound == 0 ? string.Empty : $"Round {_currentRound}:") @Enum.GetName(typeof(MatchState), _matchState)</h5>
                    }
                    else
                    {
                        <h5>@(ScrimMatchEngine.Config.Title)@(_currentRound == 0 ? string.Empty : $" - Round {_currentRound}"): @Enum.GetName(typeof(MatchState), _matchState)</h5>
                    }

                    <div class="mono-font" style="font-size: 18px; text-align: right;">
                        <MatchTimer Debug=false />
                    </div>
                </div>

                @* TODO: (1) Move buttons to own components, (2) add hover text to buttons *@
                @if (_isLoading || _isResettingRound || _isClearingMatch || _isStartingRound || _isChangingRuleset || _isEndingRound || _isLoadingActiveRulesetConfig)
                {
                    <span class="thin">
                        <SpinnerEllipsis />
                    </span>
                }
                else if (_matchState == MatchState.Uninitialized && _currentRound == 0 && !_isChangingRuleset)
                {
                    <button class="btn btn-primary" @onclick="StartMatch">
                        <span class="oi oi-media-play"></span>
                        Start Match
                    </button>
                    <button class="btn btn-outline-primary" @onclick="(() => ClearMatch(false))" title="Clear all team data, match data, and match configuration">
                        <span class="oi oi-eject"></span>
                        Clear Match
                    </button>
                }
                else if (_matchState == MatchState.Stopped && _currentRound >= 1)
                {
                    <button class="btn btn-primary" @onclick="StartMatch">
                        <span class="oi oi-media-play"></span>
                        Start Round @(_currentRound + 1)
                    </button>

                    @if (_isDeleteDataEnabled)
                    {
                        <button class="btn btn-outline-primary" @onclick="ResetRound" title="Clear the most recent round and all data from it">
                            <span class="oi oi-media-step-backward"></span>
                            Reset Round
                        </button>
                    }
                    else
                    {
                        <button disabled class="btn btn-outline-primary">
                            <span class="oi oi-media-step-backward"></span>
                            Reset Round
                        </button>
                    }

                    <button class="btn btn-outline-primary" @onclick="(() => ClearMatch(true))" title="Set up a new match with the same teams" style="width: 120px;">
                        <span class="oi oi-media-step-forward"></span>
                        Rematch
                    </button>

                    <button class="btn btn-outline-primary" @onclick="(() => ClearMatch(false))" title="Set up a new match with new teams" style="width: 120px;">
                        <span class="oi oi-eject"></span>
                        New Match
                    </button>

                    <div style="margin: 0.2rem 0;" title="Check to enable the Reset Round button">
                        <InputCheckbox id="isDeleteDataEnabledCheckBox" @bind-Value="@_isDeleteDataEnabled" style="position: relative; top: 1px;" />
                        Enable Round Resetting
                    </div>
                }
                else if (_matchState == MatchState.Paused)
                {
                    <button class="btn btn-primary" @onclick="ResumeRound">
                        <span class="oi oi-media-play"></span>
                        Resume
                    </button>
                }
                else if (_matchState == MatchState.Running)
                {
                    <button class="btn btn-primary" @onclick="PauseRound">
                        <span class="oi oi-media-pause"></span>
                        Pause Round
                    </button>
                    <button class="btn btn-outline-primary" @onclick="EndRound">
                        <span class="oi oi-media-stop"></span>
                        End Round
                    </button>
                }

                @if ((_matchState == MatchState.Uninitialized || _matchState == MatchState.Stopped) && !(_isLoading || _isResettingRound || _isClearingMatch || _isStartingRound || _isChangingRuleset || _isLoadingRulesets || _isLoadingActiveRulesetConfig))
                {
                    @if (_currentRound == 0 && _rulesets != null && _rulesets.Any())
                    {
                        <div style="display: block; margin: 0.5rem 0;">

                            <span style="width: 110px; padding-right: 4px; display: inline-block;">Ruleset:</span>
                            <InputSelect style="width: 250px; padding: 0.2rem 0.1rem;" disabled="@(_currentRound > 0)" TValue="int" Value="@_ruleset.Id" ValueChanged="@((int i) => OnChangeRulesetSelection(i))" ValueExpression="@(() => _ruleset.Id)">

                                <option value=@_ruleset.Id>@_ruleset.Name [@_ruleset.Id]</option>

                                @foreach (Ruleset ruleset in _rulesets.Where(r => r.Id != _ruleset.Id))
                                {
                                    <option value=@ruleset.Id>@ruleset.Name [@ruleset.Id]</option>
                                }
                            </InputSelect>
                        </div>
                    }
                    else if (_ruleset != null)
                    {
                        <p style="margin: 0.5rem 0;">
                            <span style="width: 110px; padding-right: 4px; display: inline-block;">Ruleset: </span>
                            @_ruleset.Name [@_ruleset.Id]
                        </p>
                    }

                    <p style="margin-bottom: 0.5rem;">
                        <span style="width: 110px; padding-right: 4px; display: inline-block;">Match Title:</span>
                        <InputText id="matchTitle" Value="@ScrimMatchEngine.Config.Title" ValueChanged="@((string s) => OnChangeMatchTitle(s))" ValueExpression="@(() => ScrimMatchEngine.Config.Title)" style="width: 250px;" maxlength="100" pattern="(?!.)$|^([A-Za-z0-9()\[\]\-_'.][ ]{0,1}){1,49}[A-Za-z0-9()\[\]\-_'.]$" />
                    </p>

                    @if (ScrimMatchEngine.Config.EnableRoundTimeLimit)
                    {
                        <p style="margin-bottom: 0.5rem;">
                            <span style="width: 110px; padding-right: 4px; display: inline-block;">Round Length:</span>
                            <InputNumber min="1" id="roundSecondsTotal" Value="@ScrimMatchEngine.Config.RoundSecondsTotal" ValueChanged="@((int s) => OnChangeRoundLength(s))" ValueExpression="@(() => ScrimMatchEngine.Config.RoundSecondsTotal)"/>
                            <span style="padding-left: 4px; width: 64px;">seconds</span>
                        </p>
                    }

                    @if (ScrimMatchEngine.Config.EndRoundOnPointValueReached)
                    {
                        <p style="margin-bottom: 0.5rem;">
                            <span style="width: 110px; padding-right: 4px; display: inline-block;">Point Target:</span>
                            <InputNumber min="1" id="roundPointTarget" TValue="int?" Value="@(ScrimMatchEngine.Config.TargetPointValue)" ValueChanged="@((int? p) => OnChangeTargetPointValue(p))" ValueExpression="@(() => ScrimMatchEngine.Config.TargetPointValue)" />
                        </p>
                    }

                    @if (ScrimMatchEngine.Config.EnablePeriodicFacilityControlRewards)
                    {
                        <div style="margin-top: 0.2rem; margin-bottom: 0.2rem;">
                            <p style="font-weight: 500; margin-bottom: 0;">Periodic Facility Control Points</p>
                            <p style="margin-bottom: 0.5rem;">
                                <span style="width: 110px; padding-right: 4px; display: inline-block;">Points:</span>
                                <InputNumber min="1" type="text" id="periodicControlPoints" TValue="int?" Value="@(ScrimMatchEngine.Config.PeriodicFacilityControlPoints)" ValueChanged="@((int? p) => OnChangePeriodicControlPoints(p))" ValueExpression="@(() => ScrimMatchEngine.Config.PeriodicFacilityControlPoints)" />
                            </p>
                            <p style="margin-bottom: 0.5rem;">
                                <span style="width: 110px; padding-right: 4px; display: inline-block;">Interval:</span>
                                <InputNumber min="1" type="text" id="periodicControlInterval" TValue="int?" Value="@(ScrimMatchEngine.Config.PeriodicFacilityControlInterval)" ValueChanged="@((int? s) => OnChangePeriodicControlPointsInterval(s))" ValueExpression="@(() => ScrimMatchEngine.Config.PeriodicFacilityControlInterval)" />
                                <span style="padding-left: 4px; width: 64px;">seconds</span>
                            </p>
                        </div>
                    }

                    <div style="margin-bottom: 0.2rem; margin-top: 0.2rem;">
                        <p style="font-weight: 500; margin-bottom: 0;">Scrim Server & Base</p>

                        @if (_worlds != null)
                        {
                            <InputSelect TValue="int" style="margin-right: 5px; width: 125px; padding: 0.1rem;" Value="@ScrimMatchEngine.Config.WorldId" ValueChanged="@((int i) => OnChangeWorldId(i))" ValueExpression="@(() => ScrimMatchEngine.Config.WorldId)">
                                @foreach (World world in _worlds)
                                {
                                    <option value="@world.Id">@world.Name (@world.Id)</option>
                                }
                            </InputSelect>
                        }

                        @if (_mapRegions != null && _zones != null)
                        {
                            <InputSelect style="margin-right: 5px; width: 250px; padding: 0.1rem;" Value="@ScrimMatchEngine.Config.FacilityId" ValueChanged="@((int i) => OnChangeFacilityId(i))" ValueExpression="@(() => ScrimMatchEngine.Config.FacilityId)">
                                <option value=@MatchConfiguration.DefaultNoFacilityId>No Base</option>

                                @foreach (Zone zone in _zones)
                                {
                                    <optgroup label="@(zone.Name)" style="background-color: var(--sq-bg-white-unlit); color: var(--sq-pink); font-size: 1rem;">@(zone.Name)</optgroup>

                                    @foreach (MapRegion region in _mapRegions.Where(r => r.ZoneId == zone.Id))
                                    {
                                        <option value=@region.FacilityId>@region.FacilityName (@region.FacilityId)</option>
                                    }
                                }
                            </InputSelect>
                        }
                    </div>

                    @if (!ScrimMatchEngine.Config.EnablePeriodicFacilityControlRewards)
                    {
                        <p style="margin-bottom: 0.2rem; margin-top: 8px;">
                            <InputCheckbox id="endRoundOnCapture" Value="@ScrimMatchEngine.Config.EndRoundOnFacilityCapture" ValueChanged="@((bool b) => OnChangeEndRoundOnFacilityCapture(b))" ValueExpression="@(() => ScrimMatchEngine.Config.EndRoundOnFacilityCapture)" style="position: relative; top: 1px;" />
                            <span style="padding-left: 8px;">End Round on Base Capture</span>
                        </p>
                    }
                }
                else
                {
                    @if (_ruleset != null)
                    {
                        <p style="margin: 0.5rem 0;">
                            <span style="font-weight: 500;">Ruleset: </span>@_ruleset.Name [@_ruleset.Id]
                        </p>
                    }

                    @if (ScrimMatchEngine.Config.TargetPointValue.HasValue && ScrimMatchEngine.Config.TargetPointValue.Value > 0)
                    {
                        <p style="margin: 0.5rem 0;">
                            First to <span style="font-weight: 500;">@(ScrimMatchEngine.Config.TargetPointValue.Value)</span> points
                        </p>
                    }
                }

                @if (!string.IsNullOrWhiteSpace(_matchId))
                {
                    <p style="color: var(--sq-gray); margin-bottom: 0.2rem; margin-top: 0.5rem;">Match Id: @_matchId</p>
                }

            </div>

            <div class="sq-mini-card-12">
                <AdminLog />
            </div>

            <div class="sq-mini-card-12">
                <StreamLog />
            </div>

        </div>

    </div>

</div>
