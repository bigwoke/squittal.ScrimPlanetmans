@using squittal.ScrimPlanetmans.ScrimMatch;
@using squittal.ScrimPlanetmans.ScrimMatch.Messages;
@using squittal.ScrimPlanetmans.ScrimMatch.Models;
@using squittal.ScrimPlanetmans.ScrimMatch.Timers;
@using squittal.ScrimPlanetmans.Services.ScrimMatch;

@inject IJSRuntime JSRuntime
@inject IScrimMessageBroadcastService MessageService

@implements IDisposable

@if (Debug)
{
    <span>@_clock (@_clockStatusDisplay)</span>
}
else
{
    if (_clock == "00:00")
    {
        <span class="timer-finished">@_clock</span>
    }
    else
    {
        <span>@_clock</span>
    }
}

<script>
    window.PlayTimerAudio = () => {
        const audio = document.getElementById('timerAudio');
        if (audio != null) {
            const audioSrc = document.getElementById('timerAudioSource')
            if (audioSrc != null) {
                audio.load();
                audio.play();
            }
        }
    }
</script>

<audio id="timerAudio"><source id="timerAudioSource" src="/resources/buzzer1.wav" /></audio>

@code {
    private string _clock = "--:--";
    private TimerState _clockStatus = TimerState.Uninitialized;

    [Parameter]
    public bool Debug { get; set; } = false;
    private string _clockStatusDisplay => Enum.GetName(typeof(TimerState), _clockStatus);

    #region Initialization Methods

    protected override void OnInitialized()
    {
        MessageService.RaiseMatchTimerTickEvent += ReceiveMatchTimerTickEvent;
    }

    public void Dispose()
    {
        MessageService.RaiseMatchTimerTickEvent -= ReceiveMatchTimerTickEvent;
    }

    #endregion Initialization Methods

    private void ReceiveMatchTimerTickEvent(object sender, ScrimMessageEventArgs<MatchTimerTickMessage> e)
    {
        MatchTimerTickMessage timer = e.Message;

        if (timer.State == TimerState.Stopped)
        {
            JSRuntime.InvokeVoidAsync("PlayTimerAudio");
        }

        _clock = timer.TimerDisplay;
        _clockStatus = timer.State;

        InvokeAsync(StateHasChanged);
    }
}
